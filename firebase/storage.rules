rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             firestore.get(/databases/(default)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Product images - Admin upload, public read
    match /products/{productId}/{imageId} {
      allow read: if true; // Public read for product images
      allow write: if isAdmin() && isValidImageFile();
      allow delete: if isAdmin();
    }

    // Category images - Admin upload, public read
    match /categories/{categoryId}/{imageId} {
      allow read: if true; // Public read for category images
      allow write: if isAdmin() && isValidImageFile();
      allow delete: if isAdmin();
    }

    // User profile images - User upload their own, public read
    match /users/{userId}/profile/{imageId} {
      allow read: if true; // Public read for profile images
      allow write: if isAuthenticated() && 
                     (request.auth.uid == userId || isAdmin()) && 
                     isValidImageFile();
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == userId || isAdmin());
    }

    // User uploaded documents (like prescriptions for supplements)
    match /users/{userId}/documents/{documentId} {
      allow read: if isAuthenticated() && 
                    (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && 
                     request.auth.uid == userId && 
                     (isValidImageFile() || isValidDocumentFile());
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == userId || isAdmin());
    }

    // Order-related documents (receipts, invoices)
    match /orders/{orderId}/documents/{documentId} {
      allow read: if isAuthenticated() && 
                    (firestore.get(/databases/(default)/documents/orders/$(orderId)).data.userId == request.auth.uid || 
                     isAdmin());
      allow write: if isAdmin() && isValidDocumentFile();
      allow delete: if isAdmin();
    }

    // Review images - Users can upload images with their reviews
    match /reviews/{reviewId}/images/{imageId} {
      allow read: if true; // Public read for review images
      allow write: if isAuthenticated() && 
                     firestore.get(/databases/(default)/documents/reviews/$(reviewId)).data.userId == request.auth.uid &&
                     isValidImageFile();
      allow delete: if isAuthenticated() && 
                      (firestore.get(/databases/(default)/documents/reviews/$(reviewId)).data.userId == request.auth.uid || 
                       isAdmin());
    }

    // Admin uploads (banners, promotional content)
    match /admin/{path=**} {
      allow read: if true; // Public read for admin content
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }

    // App assets (logos, icons, etc.)
    match /assets/{path=**} {
      allow read: if true; // Public read for app assets
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }

    // Temporary uploads folder - for processing before moving to final location
    match /temp/{userId}/{path=**} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && 
                     request.auth.uid == userId && 
                     (isValidImageFile() || isValidDocumentFile());
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == userId || isAdmin());
    }

    // Backup and exports (admin only)
    match /backups/{path=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}